[{"C:\\Projects\\capstone-project\\frontend\\src\\index.js":"1","C:\\Projects\\capstone-project\\frontend\\src\\reportWebVitals.js":"2","C:\\Projects\\capstone-project\\frontend\\src\\App.js":"3","C:\\Projects\\capstone-project\\frontend\\src\\components\\Login.js":"4","C:\\Projects\\capstone-project\\frontend\\src\\pages\\AboutPage.js":"5","C:\\Projects\\capstone-project\\frontend\\src\\components\\Dashboard.js":"6","C:\\Projects\\capstone-project\\frontend\\src\\pages\\ContactPage.js":"7","C:\\Projects\\capstone-project\\frontend\\src\\pages\\HomePage.js":"8","C:\\Projects\\capstone-project\\frontend\\src\\components\\Analysis.js":"9","C:\\Projects\\capstone-project\\frontend\\src\\components\\TopBar.js":"10","C:\\Projects\\capstone-project\\frontend\\src\\components\\SideBar.js":"11","C:\\Projects\\capstone-project\\frontend\\src\\components\\AnalysisDisplay.js":"12"},{"size":552,"mtime":1698448104550,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1698448104552,"results":"15","hashOfConfig":"14"},{"size":1135,"mtime":1700892073898,"results":"16","hashOfConfig":"14"},{"size":3304,"mtime":1700892073901,"results":"17","hashOfConfig":"14"},{"size":1106,"mtime":1700892073932,"results":"18","hashOfConfig":"14"},{"size":1231,"mtime":1700892073900,"results":"19","hashOfConfig":"14"},{"size":1345,"mtime":1700892073932,"results":"20","hashOfConfig":"14"},{"size":801,"mtime":1700892158008,"results":"21","hashOfConfig":"14"},{"size":13578,"mtime":1701110649471,"results":"22","hashOfConfig":"14"},{"size":1458,"mtime":1700892073903,"results":"23","hashOfConfig":"14"},{"size":1631,"mtime":1700892073902,"results":"24","hashOfConfig":"14"},{"size":4094,"mtime":1701033636987,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1u4jq7p",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\capstone-project\\frontend\\src\\index.js",[],[],["67"],"C:\\Projects\\capstone-project\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Projects\\capstone-project\\frontend\\src\\App.js",[],[],"C:\\Projects\\capstone-project\\frontend\\src\\components\\Login.js",[],[],"C:\\Projects\\capstone-project\\frontend\\src\\pages\\AboutPage.js",["68"],[],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TopBar from '../components/TopBar';\r\n\r\nfunction AboutUs() {\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n           <TopBar />\r\n\r\n            <div className=\"flex-grow container mx-auto flex flex-col items-center justify-center p-4\">\r\n                <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 w-full max-w-xs\">\r\n                    <h2 className=\"text-2xl font-semibold mb-4\">About Us</h2>\r\n                    <p className=\"text-gray-700 text-base\">\r\n                        We are a dedicated call center committed to providing exceptional customer service and support to our clients.\r\n                        Our team of experts is always ready to assist you with your inquiries and ensure your satisfaction.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <footer className=\"bg-white p-4 text-center\">\r\n                <p>&copy; 2023 Speech Emotion Recognition</p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AboutUs;\r\n","C:\\Projects\\capstone-project\\frontend\\src\\components\\Dashboard.js",["69","70","71","72","73","74","75","76","77","78","79","80"],[],"import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars , faTimes} from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SideBar from './SideBar'; // Import the SideBar component\r\nimport axios from 'axios';\r\n\r\nfunction Dashboard() {\r\n    const navigate = useNavigate();\r\n    const [sidebarOpen, setSidebarOpen] = useState(true);\r\n    const [inputtedAudio, setInputtedAudio] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [employeeData, setEmployeeData] = useState({ firstName: '' });\r\n\r\n    let audioFiles = null;\r\n\r\n    const toggleSidebar = () => {\r\n        setSidebarOpen(!sidebarOpen);\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex\">\r\n            <SideBar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />\r\n            {/* Main content area */}\r\n            <div className={`flex-1 p-10 transition-margin duration-300 ease-in-out ${sidebarOpen ? 'ml-64' : 'ml-0'}`}>\r\n                {/* Dashboard Content */}\r\n                <h1 className=\"text-2xl font-bold mb-4\">Dashboard Content</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Projects\\capstone-project\\frontend\\src\\pages\\ContactPage.js",["81"],[],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport TopBar from '../components/TopBar';\r\n\r\nfunction ContactUs() {\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <TopBar />\r\n            <div className=\"flex-grow container mx-auto flex flex-col items-center justify-center p-4\">\r\n                <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 w-full max-w-xs\">\r\n                    <h2 className=\"text-2xl font-semibold mb-4\">Contact Us</h2>\r\n                    <p className=\"text-gray-700 text-base\">\r\n                        If you have any questions or need assistance, please feel free to reach out to us:\r\n                    </p>\r\n                    <address className=\"not-italic mt-4\">\r\n                        <strong className=\"font-bold\">Phone:</strong> (123) 456-7890\r\n                        <br />\r\n                        <strong className=\"font-bold\">Email:</strong> <a href=\"mailto:info@callcenter.com\" className=\"text-blue-500 hover:text-blue-700\">info@callcenter.com</a>\r\n                    </address>\r\n                </div>\r\n            </div>\r\n\r\n            <footer className=\"bg-white p-4 text-center\">\r\n                <p>&copy; 2023 Speech Emotion Recognition</p>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactUs;\r\n","C:\\Projects\\capstone-project\\frontend\\src\\pages\\HomePage.js",[],[],"C:\\Projects\\capstone-project\\frontend\\src\\components\\Analysis.js",["82","83","84","85","86","87","88","89"],[],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SideBar from './SideBar'; // Import the SideBar component\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport AnalysisDisplay from './AnalysisDisplay';\r\nimport callCenterAnimation from 'C:/Projects/capstone-project/frontend/src/images/callCentreAnimation.png';\r\n\r\n\r\nfunction Analysis() {\r\n    const navigate = useNavigate();\r\n    const [sidebarOpen, setSidebarOpen] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n    const [callsData, setCallsData] = useState([]);\r\n    const [selectedCall, setSelectedCall] = useState('');\r\n    const [chartInstances, setChartInstances] = useState({});\r\n    const [aggregatedMetrics, setAggregatedMetrics] = useState(null);\r\n    const [emotionDistribution, setEmotionDistribution] = useState({});\r\n    const [isDataAnalyzed, setIsDataAnalyzed] = useState(false);\r\n    const [showUpload, setShowUpload] = useState(true);\r\n    const chartRefs = useRef({});\r\n    const emotions = { 'happy': 1, 'angry': 2, 'confused': 3, 'neutral': 4 };\r\n\r\n    let yourTestAnalysisData = [\r\n        [\r\n            { id: 0, start: 0.0, end: 2.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'confused', speaker: 'SPEAKER 1' },\r\n            { id: 1, start: 5.0, end: 6.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'happy', speaker: 'SPEAKER 1' },\r\n            { id: 2, start: 8.9, end: 10.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'angry', speaker: 'SPEAKER 1' },\r\n            { id: 3, start: 4.52, end: 8.66, text: 'This is Prithvi calling from...', emotion: 'happy', speaker: 'SPEAKER 2' },\r\n            { id: 4, start: 7.52, end: 9.66, text: 'This is Prithvi calling from...', emotion: 'angry', speaker: 'SPEAKER 2' },\r\n            { id: 5, start: 10.52, end: 11.66, text: 'This is Prithvi calling from...', emotion: 'confused', speaker: 'SPEAKER 2' }\r\n        ],\r\n        // Call 2 Data\r\n        [\r\n            { id: 0, start: 0.0, end: 2.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'angry', speaker: 'SPEAKER 2' },\r\n            { id: 1, start: 4.52, end: 8.66, text: 'This is Prithvi calling from...', emotion: 'happy', speaker: 'SPEAKER 2' }\r\n        ],\r\n\r\n        [\r\n            { id: 0, start: 0.0, end: 2.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'confused', speaker: 'SPEAKER 1' },\r\n            { id: 1, start: 5.0, end: 6.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'happy', speaker: 'SPEAKER 1' },\r\n            { id: 2, start: 8.9, end: 10.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'angry', speaker: 'SPEAKER 1' },\r\n            { id: 3, start: 4.52, end: 8.66, text: 'This is Prithvi calling from...', emotion: 'happy', speaker: 'SPEAKER 2' },\r\n            { id: 4, start: 7.52, end: 9.66, text: 'This is Prithvi calling from...', emotion: 'angry', speaker: 'SPEAKER 2' },\r\n            { id: 5, start: 10.52, end: 11.66, text: 'This is Prithvi calling from...', emotion: 'confused', speaker: 'SPEAKER 2' }\r\n        ],\r\n        [\r\n            { id: 0, start: 0.0, end: 2.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'confused', speaker: 'SPEAKER 1' },\r\n            { id: 1, start: 5.0, end: 6.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'happy', speaker: 'SPEAKER 1' },\r\n            { id: 2, start: 8.9, end: 10.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'angry', speaker: 'SPEAKER 1' },\r\n            { id: 3, start: 4.52, end: 8.66, text: 'This is Prithvi calling from...', emotion: 'happy', speaker: 'SPEAKER 2' },\r\n            { id: 4, start: 7.52, end: 9.66, text: 'This is Prithvi calling from...', emotion: 'angry', speaker: 'SPEAKER 2' },\r\n            { id: 5, start: 10.52, end: 11.66, text: 'This is Prithvi calling from...', emotion: 'confused', speaker: 'SPEAKER 2' }\r\n        ]\r\n    ];\r\n\r\n    const toggleSidebar = () => {\r\n        setSidebarOpen(!sidebarOpen);\r\n    };\r\n\r\n    // const handleFileChange = (e) => {\r\n    //     setUploadedFiles([...e.target.files]);\r\n    // };\r\n\r\n    const handleFileChange = (e) => {\r\n        setUploadedFiles([...e.target.files]);\r\n    };\r\n\r\n    const processAnalysisData = (data) => {\r\n        return data.map(callSegments => {\r\n            let speakerData = {};\r\n            callSegments.forEach(segment => {\r\n                const speakerKey = segment.speaker;\r\n                if (!speakerData[speakerKey]) {\r\n                    speakerData[speakerKey] = [];\r\n                }\r\n                speakerData[speakerKey].push({\r\n                    start: segment.start,\r\n                    end: segment.end,\r\n                    text: segment.text,\r\n                    emotion: segment.emotion\r\n                });\r\n            });\r\n            return speakerData;\r\n        });\r\n    };\r\n\r\n    const performAnalysis = async () => {\r\n        setLoading(true);\r\n        setShowUpload(false); // Hide upload section\r\n        const formData = new FormData();\r\n        uploadedFiles.forEach(file => {\r\n            formData.append('audioFiles', file);\r\n        });\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/upload-audio', formData);\r\n        } catch (error) {\r\n            console.error('Upload error:', error);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            const processedData = processAnalysisData(yourTestAnalysisData);\r\n            setCallsData(processedData);\r\n            const metrics = calculateAggregatedMetrics(processedData);\r\n            setAggregatedMetrics(metrics);\r\n            setSelectedCall('0');\r\n            setLoading(false);\r\n            setIsDataAnalyzed(true);\r\n        }, 5000); // Simulate 5-second loading\r\n    };\r\n\r\n    const handleNewAnalysis = () => {\r\n        setShowUpload(true);\r\n        setIsDataAnalyzed(false);\r\n        setAggregatedMetrics(null);\r\n    };\r\n\r\n\r\n    const emotionToValue = (emotion) => {\r\n        const emotions = { 'happy': 1, 'angry': 2, 'confused': 3, 'neutral': 4 };\r\n        return emotions[emotion] || 0;\r\n    };\r\n\r\n    const handleChangeCall = (e) => {\r\n        setSelectedCall(e.target.value);\r\n    };\r\n\r\n    const createChart = (canvasId, data) => {\r\n        const ctx = document.getElementById(canvasId).getContext('2d');\r\n\r\n        if (chartRefs.current[canvasId]) {\r\n            chartRefs.current[canvasId].destroy();\r\n        }\r\n\r\n        chartRefs.current[canvasId] = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: data.map(d => `${d.start}`),\r\n                datasets: [{\r\n                    label: 'Emotion Over Time',\r\n                    data: data.map(d => emotionToValue(d.emotion)),\r\n                    borderColor: 'rgb(75, 192, 192)',\r\n                    tension: 0.1,\r\n                    fill: false\r\n                }]\r\n            },\r\n            options: {\r\n                scales: {\r\n                    x: {\r\n                        type: 'linear',\r\n                        position: 'bottom'\r\n                    },\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        ticks: {\r\n                            stepSize: 1,\r\n                            callback: function(value) {\r\n                                return Object.keys(emotions).find(key => emotions[key] === value);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedCall !== '' && callsData[selectedCall]) {\r\n            Object.entries(callsData[selectedCall]).forEach(([speaker, data]) => {\r\n                const canvasId = `canvas${selectedCall}_${speaker}`;\r\n                createChart(canvasId, data);\r\n            });\r\n        }\r\n    }, [selectedCall, callsData]);\r\n    \r\n\r\n    const calculateAggregatedMetrics = (data) => {\r\n        let totalSatisfaction = 0;\r\n        let emotionCounts = {};\r\n        let totalDuration = 0;\r\n        let callCount = data.length;\r\n\r\n        data.forEach(call => {\r\n            Object.values(call).forEach(speaker => {\r\n                speaker.forEach(segment => {\r\n                    totalSatisfaction += emotionScore(segment.emotion);\r\n                    emotionCounts[segment.emotion] = (emotionCounts[segment.emotion] || 0) + 1;\r\n                });\r\n            });\r\n        });\r\n\r\n        data.forEach(call => {\r\n            let callEndTimes = [];\r\n            Object.values(call).forEach(speaker => {\r\n                speaker.forEach(segment => {\r\n                    callEndTimes.push(segment.end);\r\n                    console.log(\"time:\", segment['end']);\r\n                });\r\n            });\r\n            totalDuration += Math.max(...callEndTimes);\r\n        });\r\n\r\n        const mostCommonEmotion = Object.keys(emotionCounts).reduce((a, b) => emotionCounts[a] > emotionCounts[b] ? a : b, \"\");\r\n        const averageDuration = totalDuration / callCount;\r\n        const overallSatisfaction = (totalSatisfaction - callCount * -3) / (callCount * 3 - callCount * -3) * 10;\r\n\r\n        setEmotionDistribution(transformEmotionDataForChart(emotionCounts));\r\n\r\n        return {\r\n            overallCustomerSatisfaction: overallSatisfaction.toFixed(2),\r\n            mostCommonEmotion: mostCommonEmotion,\r\n            totalCallsProcessed: callCount,\r\n            averageCallDuration: averageDuration.toFixed(2)\r\n        };\r\n    };\r\n\r\n    const calculateIndividualCallMetrics = (call) => {\r\n        let maxEndTime = 0;\r\n        let totalEmotionScore = 0;\r\n        let segmentCount = 0;\r\n    \r\n        Object.values(call).forEach(speakerData => {\r\n            speakerData.forEach(segment => {\r\n                maxEndTime = Math.max(maxEndTime, segment.end || 0);\r\n                totalEmotionScore += emotionScore(segment.emotion);\r\n                segmentCount++;\r\n            });\r\n        });\r\n    \r\n        // Ensure segmentCount is not zero to avoid division by zero\r\n        if (segmentCount === 0) {\r\n            return { callDuration: '0', customerSatisfactionScore: '0' };\r\n        }\r\n    \r\n        const customerSatisfactionScore = (totalEmotionScore - segmentCount * -3) / (segmentCount * 3 - segmentCount * -3) * 10;\r\n        return {\r\n            callDuration: maxEndTime.toFixed(2),\r\n            customerSatisfactionScore: customerSatisfactionScore.toFixed(2)\r\n        };\r\n    };\r\n\r\n    const emotionScore = (emotion) => {\r\n        const scores = { 'happy': 3, 'angry': -3, 'confused': -1, 'neutral': 1 };\r\n        return scores[emotion] || 0;\r\n    };\r\n\r\n    const transformEmotionDataForChart = (emotionCounts) => {\r\n        return {\r\n            labels: Object.keys(emotionCounts),\r\n            datasets: [{\r\n                data: Object.values(emotionCounts),\r\n                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\r\n                hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']\r\n            }]\r\n        };\r\n    };\r\n\r\n    const handleAnalysisCompletion = () => {\r\n        performAnalysis();\r\n    };\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"container mx-auto p-4\">\r\n            <SideBar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />\r\n\r\n            <div className={`flex-1 p-10 ${sidebarOpen ? 'ml-64' : 'ml-0'}`}>\r\n                <button onClick={toggleSidebar} className=\"text-white absolute top-0 right-0 mt-2 mr-2\">\r\n                    <FontAwesomeIcon icon={sidebarOpen ? faTimes : faBars} size=\"lg\" />\r\n                </button>\r\n                {showUpload && (\r\n                <div>\r\n                    <h2 className=\"text-xl mb-3\">Audio Upload</h2>\r\n                    <input type=\"file\" multiple onChange={handleFileChange} className=\"mb-4\" />\r\n                    <button onClick={performAnalysis} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\">\r\n                        Upload and Analyze Audio\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {loading && (\r\n                <div className=\"absolute top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center items-center z-40\">\r\n                    <img src={callCenterAnimation} alt=\"Call Center Loading Animation\" className=\"w-1/4\" style={{ maxWidth: '100px' }} />\r\n\r\n                </div>\r\n            )}\r\n                {isDataAnalyzed && (\r\n                <>\r\n                    <h1 className=\"text-2xl font-bold mb-4\">Analysis Content</h1>\r\n\r\n                    <AnalysisDisplay\r\n                        aggregatedMetrics={aggregatedMetrics}\r\n                        emotionDistribution={emotionDistribution}\r\n                        callsData={callsData}\r\n                        selectedCall={selectedCall}\r\n                        handleChangeCall={handleChangeCall}\r\n                        calculateIndividualCallMetrics={calculateIndividualCallMetrics}\r\n                    />\r\n                    <button onClick={handleNewAnalysis} className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mt-4\">\r\n                        Analyze Another Set of Calls\r\n                    </button>\r\n                </>\r\n            )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Analysis;\r\n","C:\\Projects\\capstone-project\\frontend\\src\\components\\TopBar.js",[],[],"C:\\Projects\\capstone-project\\frontend\\src\\components\\SideBar.js",[],[],"C:\\Projects\\capstone-project\\frontend\\src\\components\\AnalysisDisplay.js",[],[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":14},{"ruleId":"92","severity":1,"message":"96","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":25},{"ruleId":"92","severity":1,"message":"97","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":16},{"ruleId":"92","severity":1,"message":"98","line":3,"column":19,"nodeType":"94","messageId":"95","endLine":3,"endColumn":26},{"ruleId":"92","severity":1,"message":"99","line":6,"column":8,"nodeType":"94","messageId":"95","endLine":6,"endColumn":13},{"ruleId":"92","severity":1,"message":"100","line":9,"column":11,"nodeType":"94","messageId":"95","endLine":9,"endColumn":19},{"ruleId":"92","severity":1,"message":"101","line":11,"column":12,"nodeType":"94","messageId":"95","endLine":11,"endColumn":25},{"ruleId":"92","severity":1,"message":"102","line":11,"column":27,"nodeType":"94","messageId":"95","endLine":11,"endColumn":43},{"ruleId":"92","severity":1,"message":"103","line":12,"column":12,"nodeType":"94","messageId":"95","endLine":12,"endColumn":19},{"ruleId":"92","severity":1,"message":"104","line":12,"column":21,"nodeType":"94","messageId":"95","endLine":12,"endColumn":31},{"ruleId":"92","severity":1,"message":"105","line":13,"column":12,"nodeType":"94","messageId":"95","endLine":13,"endColumn":24},{"ruleId":"92","severity":1,"message":"106","line":13,"column":26,"nodeType":"94","messageId":"95","endLine":13,"endColumn":41},{"ruleId":"92","severity":1,"message":"107","line":15,"column":9,"nodeType":"94","messageId":"95","endLine":15,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":14},{"ruleId":"92","severity":1,"message":"108","line":7,"column":10,"nodeType":"94","messageId":"95","endLine":7,"endColumn":14},{"ruleId":"92","severity":1,"message":"109","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":13},{"ruleId":"92","severity":1,"message":"100","line":15,"column":11,"nodeType":"94","messageId":"95","endLine":15,"endColumn":19},{"ruleId":"92","severity":1,"message":"110","line":21,"column":12,"nodeType":"94","messageId":"95","endLine":21,"endColumn":26},{"ruleId":"92","severity":1,"message":"111","line":21,"column":28,"nodeType":"94","messageId":"95","endLine":21,"endColumn":45},{"ruleId":"92","severity":1,"message":"112","line":102,"column":19,"nodeType":"94","messageId":"95","endLine":102,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":182,"column":8,"nodeType":"115","endLine":182,"endColumn":33,"suggestions":"116"},{"ruleId":"92","severity":1,"message":"117","line":266,"column":11,"nodeType":"94","messageId":"95","endLine":266,"endColumn":35},"no-new-object",["118"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'faBars' is defined but never used.","'faTimes' is defined but never used.","'axios' is defined but never used.","'navigate' is assigned a value but never used.","'inputtedAudio' is assigned a value but never used.","'setInputtedAudio' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'employeeData' is assigned a value but never used.","'setEmployeeData' is assigned a value but never used.","'audioFiles' is assigned a value but never used.","'Line' is defined but never used.","'Pie' is defined but never used.","'chartInstances' is assigned a value but never used.","'setChartInstances' is assigned a value but never used.","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createChart'. Either include it or remove the dependency array.","ArrayExpression",["119"],"'handleAnalysisCompletion' is assigned a value but never used.","no-object-constructor",{"desc":"120","fix":"121"},"Update the dependencies array to be: [selectedCall, callsData, createChart]",{"range":"122","text":"123"},[8111,8136],"[selectedCall, callsData, createChart]"]