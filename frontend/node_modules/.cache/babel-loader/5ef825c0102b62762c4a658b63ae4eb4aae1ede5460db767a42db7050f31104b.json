{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\capstone-project\\\\frontend\\\\src\\\\components\\\\Analysis.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Analysis() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [loading, setLoading] = useState(false);\n  const [inputtedAudio, setInputtedAudio] = useState(null);\n  const [callsData, setCallsData] = useState([]);\n  const [selectedCall, setSelectedCall] = useState('');\n  let yourTestAnalysisData = [\n    // Your test data here...\n  ];\n  useEffect(() => {\n    // Replace this with actual API call and data processing\n    setCallsData(processAnalysisData(yourTestAnalysisData));\n  }, []);\n  const handleAudioFileChange = e => {\n    setInputtedAudio(e.target.files);\n  };\n  const performAnalysis = async () => {\n    setLoading(true);\n    // Simulate processing and setting data\n    setTimeout(() => {\n      setCallsData(processAnalysisData(yourTestAnalysisData));\n      setLoading(false);\n    }, 3000);\n  };\n  const processAnalysisData = data => {\n    return data.map(callSegments => {\n      let speakerData = {};\n      callSegments.forEach(segment => {\n        if (!speakerData[segment.speaker]) {\n          speakerData[segment.speaker] = [];\n        }\n        speakerData[segment.speaker].push({\n          time: segment.start,\n          emotion: emotionToValue(segment.emotion)\n        });\n      });\n      return speakerData;\n    });\n  };\n  const emotionToValue = emotion => {\n    const emotions = {\n      'happy': 1,\n      'angry': 2,\n      'confused': 3,\n      'neutral': 4\n    };\n    return emotions[emotion] || 0;\n  };\n  const handleChangeCall = e => {\n    setSelectedCall(e.target.value);\n  };\n  const renderGraph = (speakerGraphData, canvasId) => {\n    const ctx = document.getElementById(canvasId).getContext('2d');\n    if (ctx) {\n      const chartData = {\n        labels: speakerGraphData.map(d => d.time),\n        datasets: [{\n          label: 'Emotion Over Time',\n          data: speakerGraphData.map(d => d.emotion),\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1,\n          fill: false\n        }]\n      };\n      const chartOptions = {\n        scales: {\n          x: {\n            type: 'linear',\n            position: 'bottom'\n          },\n          y: {\n            beginAtZero: true,\n            ticks: {\n              stepSize: 1,\n              callback: function (value) {\n                return Object.keys(emotions).find(key => emotions[key] === value);\n              }\n            }\n          }\n        }\n      };\n      new Chart(ctx, {\n        type: 'line',\n        data: chartData,\n        options: chartOptions\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: handleAudioFileChange,\n      className: \"mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: performAnalysis,\n      className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\",\n      children: \"Upload and Analyze Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleChangeCall,\n      className: \"mb-4 p-2 border border-gray-300 rounded hover:border-blue-500 transition duration-300\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), callsData.map((_, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: index,\n        children: [\"Call \", index + 1]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), selectedCall !== '' && _s(Object.entries(callsData[selectedCall]).map(_s(([speaker, data], index) => {\n      _s();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold mb-2\",\n          children: [speaker, \" - Call \", parseInt(selectedCall) + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: `canvas${selectedCall}_${speaker}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), useEffect(() => {\n          renderGraph(data, `canvas${selectedCall}_${speaker}`);\n        }, [selectedCall, callsData])]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this);\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n_s2(Analysis, \"SsAI0QMgZYxKHjtX+QCmMJCCDas=\");\n_c = Analysis;\nexport default Analysis;\nvar _c;\n$RefreshReg$(_c, \"Analysis\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","jsxDEV","_jsxDEV","Analysis","_s2","_s","$RefreshSig$","loading","setLoading","inputtedAudio","setInputtedAudio","callsData","setCallsData","selectedCall","setSelectedCall","yourTestAnalysisData","processAnalysisData","handleAudioFileChange","e","target","files","performAnalysis","setTimeout","data","map","callSegments","speakerData","forEach","segment","speaker","push","time","start","emotion","emotionToValue","emotions","handleChangeCall","value","renderGraph","speakerGraphData","canvasId","ctx","document","getElementById","getContext","chartData","labels","d","datasets","label","borderColor","tension","fill","chartOptions","scales","x","type","position","y","beginAtZero","ticks","stepSize","callback","Object","keys","find","key","options","className","children","multiple","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_","index","entries","parseInt","id","_c","$RefreshReg$"],"sources":["C:/Projects/capstone-project/frontend/src/components/Analysis.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction Analysis() {\r\n    const [loading, setLoading] = useState(false);\r\n    const [inputtedAudio, setInputtedAudio] = useState(null);\r\n    const [callsData, setCallsData] = useState([]);\r\n    const [selectedCall, setSelectedCall] = useState('');\r\n\r\n    let yourTestAnalysisData = [\r\n        // Your test data here...\r\n    ];\r\n\r\n    useEffect(() => {\r\n        // Replace this with actual API call and data processing\r\n        setCallsData(processAnalysisData(yourTestAnalysisData));\r\n    }, []);\r\n\r\n    const handleAudioFileChange = (e) => {\r\n        setInputtedAudio(e.target.files);\r\n    };\r\n\r\n    const performAnalysis = async () => {\r\n        setLoading(true);\r\n        // Simulate processing and setting data\r\n        setTimeout(() => {\r\n            setCallsData(processAnalysisData(yourTestAnalysisData));\r\n            setLoading(false);\r\n        }, 3000);\r\n    };\r\n\r\n    const processAnalysisData = (data) => {\r\n        return data.map(callSegments => {\r\n            let speakerData = {};\r\n            callSegments.forEach(segment => {\r\n                if (!speakerData[segment.speaker]) {\r\n                    speakerData[segment.speaker] = [];\r\n                }\r\n                speakerData[segment.speaker].push({\r\n                    time: segment.start,\r\n                    emotion: emotionToValue(segment.emotion)\r\n                });\r\n            });\r\n            return speakerData;\r\n        });\r\n    };\r\n\r\n    const emotionToValue = (emotion) => {\r\n        const emotions = { 'happy': 1, 'angry': 2, 'confused': 3, 'neutral': 4 };\r\n        return emotions[emotion] || 0;\r\n    };\r\n\r\n    const handleChangeCall = (e) => {\r\n        setSelectedCall(e.target.value);\r\n    };\r\n\r\n    const renderGraph = (speakerGraphData, canvasId) => {\r\n        const ctx = document.getElementById(canvasId).getContext('2d');\r\n        if (ctx) {\r\n            const chartData = {\r\n                labels: speakerGraphData.map(d => d.time),\r\n                datasets: [{\r\n                    label: 'Emotion Over Time',\r\n                    data: speakerGraphData.map(d => d.emotion),\r\n                    borderColor: 'rgb(75, 192, 192)',\r\n                    tension: 0.1,\r\n                    fill: false\r\n                }]\r\n            };\r\n\r\n            const chartOptions = {\r\n                scales: {\r\n                    x: {\r\n                        type: 'linear',\r\n                        position: 'bottom'\r\n                    },\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        ticks: {\r\n                            stepSize: 1,\r\n                            callback: function(value) {\r\n                                return Object.keys(emotions).find(key => emotions[key] === value);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            new Chart(ctx, {\r\n                type: 'line',\r\n                data: chartData,\r\n                options: chartOptions\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center p-4\">\r\n            {/* File Upload Section */}\r\n            <input type=\"file\" multiple onChange={handleAudioFileChange} className=\"mb-4\" />\r\n            <button onClick={performAnalysis} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\">\r\n                Upload and Analyze Audio\r\n            </button>\r\n\r\n            {/* Loading Screen */}\r\n            {loading && <div className=\"loader\">Loading...</div>}\r\n\r\n            {/* Dropdown for Selecting a Call */}\r\n            <select \r\n                onChange={handleChangeCall} \r\n                className=\"mb-4 p-2 border border-gray-300 rounded hover:border-blue-500 transition duration-300\"\r\n            >\r\n                <option value=\"\">Select a Call</option>\r\n                {callsData.map((_, index) => (\r\n                    <option key={index} value={index}>Call {index + 1}</option>\r\n                ))}\r\n            </select>\r\n\r\n            {/* Display Graphs for Selected Call */}\r\n            {selectedCall !== '' && Object.entries(callsData[selectedCall]).map(([speaker, data], index) => (\r\n                <div key={index} className=\"space-y-8\">\r\n                    <h2 className=\"text-lg font-semibold mb-2\">{speaker} - Call {parseInt(selectedCall) + 1}</h2>\r\n                    <canvas id={`canvas${selectedCall}_${speaker}`}></canvas>\r\n                    {useEffect(() => {\r\n                        renderGraph(data, `canvas${selectedCall}_${speaker}`);\r\n                    }, [selectedCall, callsData])}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Analysis;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}