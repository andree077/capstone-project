{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\capstone-project\\\\frontend\\\\src\\\\components\\\\Analysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Analysis() {\n  _s();\n  const [emotionsData, setEmotionsData] = useState([]);\n\n  // Mock emotions data for demonstration\n  const mockEmotionsData = [{\n    segment: 1,\n    emotion: 'happy',\n    speaker: 'customer'\n  }, {\n    segment: 2,\n    emotion: 'sad',\n    speaker: 'customer'\n  }, {\n    segment: 3,\n    emotion: 'confused',\n    speaker: 'agent'\n  }, {\n    segment: 4,\n    emotion: 'happy',\n    speaker: 'agent'\n  }];\n  useEffect(() => {\n    // Replace this mock data with the data fetched from the backend\n    setEmotionsData(mockEmotionsData);\n  }, []);\n  if (emotionsData.length === 0) {\n    // Optionally, you can add a loading indicator or message here.\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Separate data for customer and agent\n  const customerData = emotionsData.filter(data => data.speaker === 'customer');\n  const agentData = emotionsData.filter(data => data.speaker === 'agent');\n\n  // Define emotion values\n  const emotionValues = {\n    happy: 3,\n    // Value for happy emotion\n    sad: -3,\n    // Value for sad emotion\n    confused: 0 // Value for confused emotion\n  };\n\n  // Extract emotions for plotting\n  const customerEmotions = customerData.map(data => emotionValues[data.emotion]);\n  const agentEmotions = agentData.map(data => emotionValues[data.emotion]);\n\n  // Create datasets for the Line chart\n  const customerDataset = {\n    label: 'Customer Emotions',\n    data: customerEmotions,\n    fill: false,\n    borderColor: 'rgba(75, 192, 192, 1)'\n  };\n  const agentDataset = {\n    label: 'Agent Emotions',\n    data: agentEmotions,\n    fill: false,\n    borderColor: 'rgba(255, 99, 132, 1)'\n  };\n\n  // Chart data\n  const chartData = {\n    labels: Array.from({\n      length: emotionsData.length\n    }, (_, i) => `Segment ${i + 1}`),\n    datasets: [customerDataset, agentDataset]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analysis-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Analysis Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Analysis, \"XwiLyigmF5kkKdEmPbBZczwsnnQ=\");\n_c = Analysis;\nexport default Analysis;\nvar _c;\n$RefreshReg$(_c, \"Analysis\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","Analysis","_s","emotionsData","setEmotionsData","mockEmotionsData","segment","emotion","speaker","length","children","fileName","_jsxFileName","lineNumber","columnNumber","customerData","filter","data","agentData","emotionValues","happy","sad","confused","customerEmotions","map","agentEmotions","customerDataset","label","fill","borderColor","agentDataset","chartData","labels","Array","from","_","i","datasets","className","_c","$RefreshReg$"],"sources":["C:/Projects/capstone-project/frontend/src/components/Analysis.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction Analysis() {\r\n    const [emotionsData, setEmotionsData] = useState([]);\r\n\r\n    // Mock emotions data for demonstration\r\n    const mockEmotionsData = [\r\n        { segment: 1, emotion: 'happy', speaker: 'customer' },\r\n        { segment: 2, emotion: 'sad', speaker: 'customer' },\r\n        { segment: 3, emotion: 'confused', speaker: 'agent' },\r\n        { segment: 4, emotion: 'happy', speaker: 'agent' },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        // Replace this mock data with the data fetched from the backend\r\n        setEmotionsData(mockEmotionsData);\r\n    }, []);\r\n\r\n    if (emotionsData.length === 0) {\r\n        // Optionally, you can add a loading indicator or message here.\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    // Separate data for customer and agent\r\n    const customerData = emotionsData.filter((data) => data.speaker === 'customer');\r\n    const agentData = emotionsData.filter((data) => data.speaker === 'agent');\r\n\r\n    // Define emotion values\r\n    const emotionValues = {\r\n        happy: 3, // Value for happy emotion\r\n        sad: -3, // Value for sad emotion\r\n        confused: 0, // Value for confused emotion\r\n    };\r\n\r\n    // Extract emotions for plotting\r\n    const customerEmotions = customerData.map((data) => emotionValues[data.emotion]);\r\n    const agentEmotions = agentData.map((data) => emotionValues[data.emotion]);\r\n\r\n    // Create datasets for the Line chart\r\n    const customerDataset = {\r\n        label: 'Customer Emotions',\r\n        data: customerEmotions,\r\n        fill: false,\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n    };\r\n\r\n    const agentDataset = {\r\n        label: 'Agent Emotions',\r\n        data: agentEmotions,\r\n        fill: false,\r\n        borderColor: 'rgba(255, 99, 132, 1)',\r\n    };\r\n\r\n    // Chart data\r\n    const chartData = {\r\n        labels: Array.from({ length: emotionsData.length }, (_, i) => `Segment ${i + 1}`),\r\n        datasets: [customerDataset, agentDataset],\r\n    };\r\n\r\n    return (\r\n        <div className='analysis-page'>\r\n            <h1>Analysis Page</h1>\r\n            <div className='chart'>\r\n                <Line data={chartData} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Analysis;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}