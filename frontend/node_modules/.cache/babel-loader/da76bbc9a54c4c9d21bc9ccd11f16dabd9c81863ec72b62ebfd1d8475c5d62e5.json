{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\capstone-project\\\\frontend\\\\src\\\\components\\\\Analysis.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { useNavigate } from 'react-router-dom';\nimport SideBar from './SideBar'; // Import the SideBar component\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { Pie } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport AnalysisDisplay from './AnalysisDisplay';\nimport callCenterAnimation from 'D:/Projects/capstone-project/frontend/src/images/callCentreAnimation.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Analysis() {\n  _s();\n  const navigate = useNavigate();\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  const [callsData, setCallsData] = useState([]);\n  const [selectedCall, setSelectedCall] = useState('');\n  const [chartInstances, setChartInstances] = useState({});\n  const [aggregatedMetrics, setAggregatedMetrics] = useState(null);\n  const [emotionDistribution, setEmotionDistribution] = useState({});\n  const [isDataAnalyzed, setIsDataAnalyzed] = useState(false);\n  const [showUpload, setShowUpload] = useState(true);\n  const chartRefs = useRef({});\n  const emotions = {\n    'happy': 1,\n    'angry': 2,\n    'confused': 3,\n    'neutral': 4\n  };\n  let yourTestAnalysisData = [\n  // Call 1 Data\n  [{\n    id: 0,\n    start: 0.0,\n    end: 2.0,\n    text: \"Hello, I'm speaking to Amma.\",\n    emotion: 'confused',\n    speaker: 'SPEAKER 1'\n  }, {\n    id: 1,\n    start: 5.0,\n    end: 6.0,\n    text: \"Hello, I'm speaking to Amma.\",\n    emotion: 'happy',\n    speaker: 'SPEAKER 1'\n  }, {\n    id: 2,\n    start: 8.9,\n    end: 10.0,\n    text: \"Hello, I'm speaking to Amma.\",\n    emotion: 'angry',\n    speaker: 'SPEAKER 1'\n  }, {\n    id: 3,\n    start: 4.52,\n    end: 8.66,\n    text: 'This is Prithvi calling from...',\n    emotion: 'happy',\n    speaker: 'SPEAKER 2'\n  }, {\n    id: 4,\n    start: 7.52,\n    end: 9.66,\n    text: 'This is Prithvi calling from...',\n    emotion: 'angry',\n    speaker: 'SPEAKER 2'\n  }, {\n    id: 5,\n    start: 10.52,\n    end: 11.66,\n    text: 'This is Prithvi calling from...',\n    emotion: 'confused',\n    speaker: 'SPEAKER 2'\n  }],\n  // Call 2 Data\n  [{\n    id: 0,\n    start: 0.0,\n    end: 2.0,\n    text: \"Hello, I'm speaking to Amma.\",\n    emotion: 'angry',\n    speaker: 'SPEAKER 2'\n  }, {\n    id: 1,\n    start: 4.52,\n    end: 8.66,\n    text: 'This is Prithvi calling from...',\n    emotion: 'happy',\n    speaker: 'SPEAKER 2'\n  }],\n  // Call 3 Data\n  [{\n    id: 0,\n    start: 0.0,\n    end: 2.0,\n    text: \"Hello, I'm speaking to Amma.\",\n    emotion: 'confused',\n    speaker: 'SPEAKER 1'\n  }, {\n    id: 1,\n    start: 5.0,\n    end: 6.0,\n    text: \"Hello, I'm speaking to Amma.\",\n    emotion: 'happy',\n    speaker: 'SPEAKER 1'\n  }, {\n    id: 2,\n    start: 8.9,\n    end: 10.0,\n    text: \"Hello, I'm speaking to Amma.\",\n    emotion: 'angry',\n    speaker: 'SPEAKER 1'\n  }, {\n    id: 3,\n    start: 4.52,\n    end: 8.66,\n    text: 'This is Prithvi calling from...',\n    emotion: 'happy',\n    speaker: 'SPEAKER 2'\n  }, {\n    id: 4,\n    start: 7.52,\n    end: 9.66,\n    text: 'This is Prithvi calling from...',\n    emotion: 'angry',\n    speaker: 'SPEAKER 2'\n  }, {\n    id: 5,\n    start: 10.52,\n    end: 11.66,\n    text: 'This is Prithvi calling from...',\n    emotion: 'confused',\n    speaker: 'SPEAKER 2'\n  }]];\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  // const handleFileChange = (e) => {\n  //     setUploadedFiles([...e.target.files]);\n  // };\n\n  const handleFileChange = e => {\n    setUploadedFiles([...e.target.files]);\n  };\n  const processAnalysisData = data => {\n    return data.map(callSegments => {\n      let speakerData = {};\n      callSegments.forEach(segment => {\n        const speakerKey = segment.speaker;\n        if (!speakerData[speakerKey]) {\n          speakerData[speakerKey] = [];\n        }\n        speakerData[speakerKey].push({\n          start: segment.start,\n          end: segment.end,\n          text: segment.text,\n          emotion: segment.emotion\n        });\n      });\n      return speakerData;\n    });\n  };\n  const performAnalysis = async () => {\n    setLoading(true);\n    setShowUpload(false); // Hide upload section\n    const formData = new FormData();\n    uploadedFiles.forEach(file => {\n      formData.append('audioFiles', file);\n    });\n    try {\n      const response = await axios.post('http://localhost:5000/upload-audio', formData);\n      setCallsData(response.data); // Assuming the backend sends data in the desired format\n      setIsDataAnalyzed(true);\n    } catch (error) {\n      console.error('Upload error:', error);\n    }\n    setTimeout(() => {\n      const processedData = processAnalysisData(yourTestAnalysisData);\n      setCallsData(processedData);\n      const metrics = calculateAggregatedMetrics(processedData);\n      setAggregatedMetrics(metrics);\n      setSelectedCall('0');\n      setLoading(false);\n      setIsDataAnalyzed(true);\n    }, 5000); // Simulate 5-second loading\n  };\n\n  const handleNewAnalysis = () => {\n    setShowUpload(true);\n    setIsDataAnalyzed(false);\n    setAggregatedMetrics(null);\n  };\n  const emotionToValue = emotion => {\n    const emotions = {\n      'happy': 1,\n      'angry': 2,\n      'confused': 3,\n      'neutral': 4\n    };\n    return emotions[emotion] || 0;\n  };\n  const handleChangeCall = e => {\n    setSelectedCall(e.target.value);\n  };\n  const createChart = (canvasId, data) => {\n    const ctx = document.getElementById(canvasId);\n    if (!ctx) return; // Guard clause if canvas is not found\n\n    // Destroy previous chart if exists\n    if (chartRefs.current[canvasId]) {\n      chartRefs.current[canvasId].destroy();\n    }\n\n    // Create new chart instance\n    chartRefs.current[canvasId] = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: data.map(d => `${d.start}`),\n        datasets: [{\n          label: 'Emotion Over Time',\n          data: data.map(d => emotionToValue(d.emotion)),\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1,\n          fill: false\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'linear',\n            position: 'bottom'\n          },\n          y: {\n            beginAtZero: true,\n            ticks: {\n              stepSize: 1,\n              callback: function (value) {\n                return Object.keys(emotions).find(key => emotions[key] === value);\n              }\n            }\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false\n      }\n    });\n  };\n  useEffect(() => {\n    if (selectedCall !== '' && callsData[selectedCall]) {\n      Object.entries(callsData[selectedCall]).forEach(([speaker, data]) => {\n        const canvasId = `canvas${selectedCall}_${speaker}`;\n        createChart(canvasId, data);\n      });\n    }\n  }, [selectedCall, callsData]);\n  const calculateAggregatedMetrics = data => {\n    let totalSatisfaction = 0;\n    let emotionCounts = {};\n    let totalDuration = 0;\n    let callCount = data.length;\n    data.forEach(call => {\n      Object.values(call).forEach(speaker => {\n        speaker.forEach(segment => {\n          totalSatisfaction += emotionScore(segment.emotion);\n          emotionCounts[segment.emotion] = (emotionCounts[segment.emotion] || 0) + 1;\n        });\n      });\n    });\n    data.forEach(call => {\n      let callEndTimes = [];\n      Object.values(call).forEach(speaker => {\n        speaker.forEach(segment => {\n          callEndTimes.push(segment.end);\n          console.log(\"time:\", segment['end']);\n        });\n      });\n      totalDuration += Math.max(...callEndTimes);\n    });\n    const mostCommonEmotion = Object.keys(emotionCounts).reduce((a, b) => emotionCounts[a] > emotionCounts[b] ? a : b, \"\");\n    const averageDuration = totalDuration / callCount;\n    const overallSatisfaction = (totalSatisfaction - callCount * -3) / (callCount * 3 - callCount * -3) * 10;\n    setEmotionDistribution(transformEmotionDataForChart(emotionCounts));\n    return {\n      overallCustomerSatisfaction: overallSatisfaction.toFixed(2),\n      mostCommonEmotion: mostCommonEmotion,\n      totalCallsProcessed: callCount,\n      averageCallDuration: averageDuration.toFixed(2)\n    };\n  };\n  const calculateIndividualCallMetrics = call => {\n    let maxEndTime = 0;\n    let totalEmotionScore = 0;\n    let segmentCount = 0;\n    Object.values(call).forEach(speakerData => {\n      speakerData.forEach(segment => {\n        maxEndTime = Math.max(maxEndTime, segment.end || 0);\n        totalEmotionScore += emotionScore(segment.emotion);\n        segmentCount++;\n      });\n    });\n\n    // Ensure segmentCount is not zero to avoid division by zero\n    if (segmentCount === 0) {\n      return {\n        callDuration: '0',\n        customerSatisfactionScore: '0'\n      };\n    }\n    const customerSatisfactionScore = (totalEmotionScore - segmentCount * -3) / (segmentCount * 3 - segmentCount * -3) * 10;\n    return {\n      callDuration: maxEndTime.toFixed(2),\n      customerSatisfactionScore: customerSatisfactionScore.toFixed(2)\n    };\n  };\n  const emotionScore = emotion => {\n    const scores = {\n      'happy': 3,\n      'angry': -3,\n      'confused': -1,\n      'neutral': 1\n    };\n    return scores[emotion] || 0;\n  };\n  const transformEmotionDataForChart = emotionCounts => {\n    return {\n      labels: Object.keys(emotionCounts),\n      datasets: [{\n        data: Object.values(emotionCounts),\n        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\n        hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']\n      }]\n    };\n  };\n  const handleAnalysisCompletion = () => {\n    performAnalysis();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(SideBar, {\n      isOpen: sidebarOpen,\n      toggleSidebar: toggleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flex-1 p-10 ${sidebarOpen ? 'ml-64' : 'ml-0'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleSidebar,\n        className: \"text-white absolute top-0 right-0 mt-2 mr-2\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: sidebarOpen ? faTimes : faBars,\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), showUpload && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl mb-3\",\n          children: \"Audio Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          multiple: true,\n          onChange: handleFileChange,\n          className: \"mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: performAnalysis,\n          className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\",\n          children: \"Upload and Analyze Audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center items-center z-40\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: callCenterAnimation,\n          alt: \"Call Center Loading Animation\",\n          className: \"w-1/4\",\n          style: {\n            maxWidth: '100px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }, this), isDataAnalyzed && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold mb-4\",\n          children: \"Analysis Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AnalysisDisplay, {\n          aggregatedMetrics: aggregatedMetrics,\n          emotionDistribution: emotionDistribution,\n          callsData: callsData,\n          selectedCall: selectedCall,\n          handleChangeCall: handleChangeCall,\n          calculateIndividualCallMetrics: calculateIndividualCallMetrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewAnalysis,\n          className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mt-4\",\n          children: \"Analyze Another Set of Calls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 9\n  }, this);\n}\n_s(Analysis, \"OGKlBipKHg0TUViojKCi6wlYuJE=\", false, function () {\n  return [useNavigate];\n});\n_c = Analysis;\nexport default Analysis;\nvar _c;\n$RefreshReg$(_c, \"Analysis\");","map":{"version":3,"names":["React","useRef","useState","useEffect","FontAwesomeIcon","faBars","faTimes","useNavigate","SideBar","axios","Line","Pie","Chart","AnalysisDisplay","callCenterAnimation","jsxDEV","_jsxDEV","Fragment","_Fragment","Analysis","_s","navigate","sidebarOpen","setSidebarOpen","loading","setLoading","uploadedFiles","setUploadedFiles","callsData","setCallsData","selectedCall","setSelectedCall","chartInstances","setChartInstances","aggregatedMetrics","setAggregatedMetrics","emotionDistribution","setEmotionDistribution","isDataAnalyzed","setIsDataAnalyzed","showUpload","setShowUpload","chartRefs","emotions","yourTestAnalysisData","id","start","end","text","emotion","speaker","toggleSidebar","handleFileChange","e","target","files","processAnalysisData","data","map","callSegments","speakerData","forEach","segment","speakerKey","push","performAnalysis","formData","FormData","file","append","response","post","error","console","setTimeout","processedData","metrics","calculateAggregatedMetrics","handleNewAnalysis","emotionToValue","handleChangeCall","value","createChart","canvasId","ctx","document","getElementById","current","destroy","type","labels","d","datasets","label","borderColor","tension","fill","options","scales","x","position","y","beginAtZero","ticks","stepSize","callback","Object","keys","find","key","responsive","maintainAspectRatio","entries","totalSatisfaction","emotionCounts","totalDuration","callCount","length","call","values","emotionScore","callEndTimes","log","Math","max","mostCommonEmotion","reduce","a","b","averageDuration","overallSatisfaction","transformEmotionDataForChart","overallCustomerSatisfaction","toFixed","totalCallsProcessed","averageCallDuration","calculateIndividualCallMetrics","maxEndTime","totalEmotionScore","segmentCount","callDuration","customerSatisfactionScore","scores","backgroundColor","hoverBackgroundColor","handleAnalysisCompletion","className","children","isOpen","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","size","multiple","onChange","src","alt","style","maxWidth","_c","$RefreshReg$"],"sources":["D:/Projects/capstone-project/frontend/src/components/Analysis.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SideBar from './SideBar'; // Import the SideBar component\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport AnalysisDisplay from './AnalysisDisplay';\r\nimport callCenterAnimation from 'D:/Projects/capstone-project/frontend/src/images/callCentreAnimation.png';\r\n\r\n\r\nfunction Analysis() {\r\n    const navigate = useNavigate();\r\n    const [sidebarOpen, setSidebarOpen] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n    const [uploadedFiles, setUploadedFiles] = useState([]);\r\n    const [callsData, setCallsData] = useState([]);\r\n    const [selectedCall, setSelectedCall] = useState('');\r\n    const [chartInstances, setChartInstances] = useState({});\r\n    const [aggregatedMetrics, setAggregatedMetrics] = useState(null);\r\n    const [emotionDistribution, setEmotionDistribution] = useState({});\r\n    const [isDataAnalyzed, setIsDataAnalyzed] = useState(false);\r\n    const [showUpload, setShowUpload] = useState(true);\r\n    const chartRefs = useRef({});\r\n    const emotions = { 'happy': 1, 'angry': 2, 'confused': 3, 'neutral': 4 };\r\n\r\n    let yourTestAnalysisData = [\r\n        // Call 1 Data\r\n        [\r\n            { id: 0, start: 0.0, end: 2.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'confused', speaker: 'SPEAKER 1' },\r\n            { id: 1, start: 5.0, end: 6.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'happy', speaker: 'SPEAKER 1' },\r\n            { id: 2, start: 8.9, end: 10.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'angry', speaker: 'SPEAKER 1' },\r\n            { id: 3, start: 4.52, end: 8.66, text: 'This is Prithvi calling from...', emotion: 'happy', speaker: 'SPEAKER 2' },\r\n            { id: 4, start: 7.52, end: 9.66, text: 'This is Prithvi calling from...', emotion: 'angry', speaker: 'SPEAKER 2' },\r\n            { id: 5, start: 10.52, end: 11.66, text: 'This is Prithvi calling from...', emotion: 'confused', speaker: 'SPEAKER 2' }\r\n        ],\r\n        // Call 2 Data\r\n        [\r\n            { id: 0, start: 0.0, end: 2.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'angry', speaker: 'SPEAKER 2' },\r\n            { id: 1, start: 4.52, end: 8.66, text: 'This is Prithvi calling from...', emotion: 'happy', speaker: 'SPEAKER 2' }\r\n        ],\r\n        // Call 3 Data\r\n        [\r\n            { id: 0, start: 0.0, end: 2.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'confused', speaker: 'SPEAKER 1' },\r\n            { id: 1, start: 5.0, end: 6.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'happy', speaker: 'SPEAKER 1' },\r\n            { id: 2, start: 8.9, end: 10.0, text: \"Hello, I'm speaking to Amma.\", emotion: 'angry', speaker: 'SPEAKER 1' },\r\n            { id: 3, start: 4.52, end: 8.66, text: 'This is Prithvi calling from...', emotion: 'happy', speaker: 'SPEAKER 2' },\r\n            { id: 4, start: 7.52, end: 9.66, text: 'This is Prithvi calling from...', emotion: 'angry', speaker: 'SPEAKER 2' },\r\n            { id: 5, start: 10.52, end: 11.66, text: 'This is Prithvi calling from...', emotion: 'confused', speaker: 'SPEAKER 2' }\r\n        ]\r\n    ];\r\n\r\n    const toggleSidebar = () => {\r\n        setSidebarOpen(!sidebarOpen);\r\n    };\r\n\r\n    // const handleFileChange = (e) => {\r\n    //     setUploadedFiles([...e.target.files]);\r\n    // };\r\n\r\n    const handleFileChange = (e) => {\r\n        setUploadedFiles([...e.target.files]);\r\n    };\r\n\r\n    const processAnalysisData = (data) => {\r\n        return data.map(callSegments => {\r\n            let speakerData = {};\r\n            callSegments.forEach(segment => {\r\n                const speakerKey = segment.speaker;\r\n                if (!speakerData[speakerKey]) {\r\n                    speakerData[speakerKey] = [];\r\n                }\r\n                speakerData[speakerKey].push({\r\n                    start: segment.start,\r\n                    end: segment.end,\r\n                    text: segment.text,\r\n                    emotion: segment.emotion\r\n                });\r\n            });\r\n            return speakerData;\r\n        });\r\n    };\r\n\r\n    const performAnalysis = async () => {\r\n        setLoading(true);\r\n        setShowUpload(false); // Hide upload section\r\n        const formData = new FormData();\r\n        uploadedFiles.forEach(file => {\r\n            formData.append('audioFiles', file);\r\n        });\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/upload-audio', formData);\r\n            setCallsData(response.data); // Assuming the backend sends data in the desired format\r\n            setIsDataAnalyzed(true);\r\n        } catch (error) {\r\n            console.error('Upload error:', error);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            const processedData = processAnalysisData(yourTestAnalysisData);\r\n            setCallsData(processedData);\r\n            const metrics = calculateAggregatedMetrics(processedData);\r\n            setAggregatedMetrics(metrics);\r\n            setSelectedCall('0');\r\n            setLoading(false);\r\n            setIsDataAnalyzed(true);\r\n        }, 5000); // Simulate 5-second loading\r\n    };\r\n\r\n    const handleNewAnalysis = () => {\r\n        setShowUpload(true);\r\n        setIsDataAnalyzed(false);\r\n        setAggregatedMetrics(null);\r\n    };\r\n\r\n\r\n    const emotionToValue = (emotion) => {\r\n        const emotions = { 'happy': 1, 'angry': 2, 'confused': 3, 'neutral': 4 };\r\n        return emotions[emotion] || 0;\r\n    };\r\n\r\n    const handleChangeCall = (e) => {\r\n        setSelectedCall(e.target.value);\r\n    };\r\n\r\n    const createChart = (canvasId, data) => {\r\n        const ctx = document.getElementById(canvasId);\r\n        if (!ctx) return; // Guard clause if canvas is not found\r\n\r\n        // Destroy previous chart if exists\r\n        if (chartRefs.current[canvasId]) {\r\n            chartRefs.current[canvasId].destroy();\r\n        }\r\n\r\n        // Create new chart instance\r\n        chartRefs.current[canvasId] = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: data.map(d => `${d.start}`),\r\n                datasets: [{\r\n                    label: 'Emotion Over Time',\r\n                    data: data.map(d => emotionToValue(d.emotion)),\r\n                    borderColor: 'rgb(75, 192, 192)',\r\n                    tension: 0.1,\r\n                    fill: false\r\n                }]\r\n            },\r\n            options: {\r\n                scales: {\r\n                    x: {\r\n                        type: 'linear',\r\n                        position: 'bottom'\r\n                    },\r\n                    y: {\r\n                        beginAtZero: true,\r\n                        ticks: {\r\n                            stepSize: 1,\r\n                            callback: function(value) {\r\n                                return Object.keys(emotions).find(key => emotions[key] === value);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedCall !== '' && callsData[selectedCall]) {\r\n            Object.entries(callsData[selectedCall]).forEach(([speaker, data]) => {\r\n                const canvasId = `canvas${selectedCall}_${speaker}`;\r\n                createChart(canvasId, data);\r\n            });\r\n        }\r\n    }, [selectedCall, callsData]);\r\n    \r\n\r\n    const calculateAggregatedMetrics = (data) => {\r\n        let totalSatisfaction = 0;\r\n        let emotionCounts = {};\r\n        let totalDuration = 0;\r\n        let callCount = data.length;\r\n\r\n        data.forEach(call => {\r\n            Object.values(call).forEach(speaker => {\r\n                speaker.forEach(segment => {\r\n                    totalSatisfaction += emotionScore(segment.emotion);\r\n                    emotionCounts[segment.emotion] = (emotionCounts[segment.emotion] || 0) + 1;\r\n                });\r\n            });\r\n        });\r\n\r\n        data.forEach(call => {\r\n            let callEndTimes = [];\r\n            Object.values(call).forEach(speaker => {\r\n                speaker.forEach(segment => {\r\n                    callEndTimes.push(segment.end);\r\n                    console.log(\"time:\", segment['end']);\r\n                });\r\n            });\r\n            totalDuration += Math.max(...callEndTimes);\r\n        });\r\n\r\n        const mostCommonEmotion = Object.keys(emotionCounts).reduce((a, b) => emotionCounts[a] > emotionCounts[b] ? a : b, \"\");\r\n        const averageDuration = totalDuration / callCount;\r\n        const overallSatisfaction = (totalSatisfaction - callCount * -3) / (callCount * 3 - callCount * -3) * 10;\r\n\r\n        setEmotionDistribution(transformEmotionDataForChart(emotionCounts));\r\n\r\n        return {\r\n            overallCustomerSatisfaction: overallSatisfaction.toFixed(2),\r\n            mostCommonEmotion: mostCommonEmotion,\r\n            totalCallsProcessed: callCount,\r\n            averageCallDuration: averageDuration.toFixed(2)\r\n        };\r\n    };\r\n\r\n    const calculateIndividualCallMetrics = (call) => {\r\n        let maxEndTime = 0;\r\n        let totalEmotionScore = 0;\r\n        let segmentCount = 0;\r\n    \r\n        Object.values(call).forEach(speakerData => {\r\n            speakerData.forEach(segment => {\r\n                maxEndTime = Math.max(maxEndTime, segment.end || 0);\r\n                totalEmotionScore += emotionScore(segment.emotion);\r\n                segmentCount++;\r\n            });\r\n        });\r\n    \r\n        // Ensure segmentCount is not zero to avoid division by zero\r\n        if (segmentCount === 0) {\r\n            return { callDuration: '0', customerSatisfactionScore: '0' };\r\n        }\r\n    \r\n        const customerSatisfactionScore = (totalEmotionScore - segmentCount * -3) / (segmentCount * 3 - segmentCount * -3) * 10;\r\n        return {\r\n            callDuration: maxEndTime.toFixed(2),\r\n            customerSatisfactionScore: customerSatisfactionScore.toFixed(2)\r\n        };\r\n    };\r\n\r\n    const emotionScore = (emotion) => {\r\n        const scores = { 'happy': 3, 'angry': -3, 'confused': -1, 'neutral': 1 };\r\n        return scores[emotion] || 0;\r\n    };\r\n\r\n    const transformEmotionDataForChart = (emotionCounts) => {\r\n        return {\r\n            labels: Object.keys(emotionCounts),\r\n            datasets: [{\r\n                data: Object.values(emotionCounts),\r\n                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\r\n                hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']\r\n            }]\r\n        };\r\n    };\r\n\r\n    const handleAnalysisCompletion = () => {\r\n        performAnalysis();\r\n    };\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"container mx-auto p-4\">\r\n            <SideBar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />\r\n\r\n            <div className={`flex-1 p-10 ${sidebarOpen ? 'ml-64' : 'ml-0'}`}>\r\n                <button onClick={toggleSidebar} className=\"text-white absolute top-0 right-0 mt-2 mr-2\">\r\n                    <FontAwesomeIcon icon={sidebarOpen ? faTimes : faBars} size=\"lg\" />\r\n                </button>\r\n                {showUpload && (\r\n                <div>\r\n                    <h2 className=\"text-xl mb-3\">Audio Upload</h2>\r\n                    <input type=\"file\" multiple onChange={handleFileChange} className=\"mb-4\" />\r\n                    <button onClick={performAnalysis} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4\">\r\n                        Upload and Analyze Audio\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {loading && (\r\n                <div className=\"absolute top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center items-center z-40\">\r\n                    <img src={callCenterAnimation} alt=\"Call Center Loading Animation\" className=\"w-1/4\" style={{ maxWidth: '100px' }} />\r\n\r\n                </div>\r\n            )}\r\n                {isDataAnalyzed && (\r\n                <>\r\n                    <h1 className=\"text-2xl font-bold mb-4\">Analysis Content</h1>\r\n\r\n                    <AnalysisDisplay\r\n                        aggregatedMetrics={aggregatedMetrics}\r\n                        emotionDistribution={emotionDistribution}\r\n                        callsData={callsData}\r\n                        selectedCall={selectedCall}\r\n                        handleChangeCall={handleChangeCall}\r\n                        calculateIndividualCallMetrics={calculateIndividualCallMetrics}\r\n                    />\r\n                    <button onClick={handleNewAnalysis} className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mt-4\">\r\n                        Analyze Another Set of Calls\r\n                    </button>\r\n                </>\r\n            )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Analysis;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}